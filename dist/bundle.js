(()=>{"use strict";async function e(e,t={}){const o=localStorage.getItem("token"),n={...t.headers,...o&&{Authorization:`Bearer ${o}`}};try{console.log("Fetching token",e);const o=await fetch(e,{...t,headers:n});if(console.log("Raw Response:",o),!o.ok){const e=await o.json();throw new Error(e.message||`HTTP error ! status : ${o.status}`)}const a=await o.json();return console.log("Parsed JSON Response:",a),a}catch(e){throw console.error(e),e}}const t="https://notes-api.dicoding.dev/v2";function o(){return new Promise((e=>{const t=document.createElement("div");t.id="loading-indicator",t.textContent="Loading...",t.style.position="fixed",t.style.top="50%",t.style.left="50%",t.style.transform="translate(-50%, -50%)",t.style.padding="20px",t.style.backgroundColor="rgba(0, 0, 0, 0.5)",t.style.color="white",t.style.borderRadius="5px",t.style.zIndex="1000",document.body.appendChild(t),setTimeout((()=>{e()}),3e3)}))}function n(){const e=document.getElementById("loading-indicator");e&&e.remove()}document.addEventListener("DOMContentLoaded",(()=>{const a=document.getElementById("notes-list");async function s(){await o();try{const o=await async function(){try{return await e(`${t}/notes`)}catch(e){throw console.error("Error fetching all notes:",e),e}}();console.log("Response FROM getAllNotes",o);const{status:n,message:s,data:r}=o;if("success"!==n)throw new Error(s||"Failed to fetch notes");a.innerHTML="",r.forEach((e=>{const t=document.createElement("li");t.classList.add("note-item"),t.innerHTML=`\n          <h3>${e.title}</h3>\n          <p>${e.body}</p>\n          <button class="delete-button" data-id="${e.id}">Delete</button>\n        `,a.appendChild(t)}))}catch(e){alert(`Failed to fetch notes: ${e.message}`)}finally{n()}}document.getElementById("add-note-form").addEventListener("submit",(async a=>{a.preventDefault(),console.log("Submit event triggered (single check)");const r=document.getElementById("title"),c=document.getElementById("body"),i=r.value.trim(),l=c.value.trim();if(i&&l){await o(),console.log("Before createNote()");try{const o=await async function(o,n){try{return await e(`${t}/notes`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:o,body:n})})}catch(e){throw console.error("Error creating note:",e),e}}(i,l),{status:n,message:a,data:d}=o;if(console.log("After createNote()",o),"success"!==n)throw new Error(a||"Failed to add note");r.value="",c.value="",await s(),console.log("After renderNotes()")}catch(e){alert(`Failed to add note: ${e.message}`)}finally{n()}}else alert("Title and body cannot be empty.")})),a.addEventListener("click",(async a=>{if(a.target.classList.contains("delete-button")){const r=a.target.dataset.id;if(confirm("Are you sure you want to delete this note?")){await o();try{const o=await async function(o){return e(`${t}/notes/${o}`,{method:"DELETE"})}(r),{status:n,message:a}=o;if("success"!==n)throw new Error(a||"Failed to delete note");await s(),console.log("renderNotes() called after delete")}catch(e){alert(`Failed to delete note: ${e.message}`)}finally{n()}}}})),s()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,